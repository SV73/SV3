Q1 Write a program to implement FIFO page replacement policies.

#include <stdio.h>

int main()
{
    int i, j, n, a[50], frame[10], no, k, avail, count = 0;

    printf("\nENTER THE NUMBER OF PAGES:\n");
    scanf("%d", &n);

    printf("\nENTER THE PAGE NUMBERS:\n");
    for (i = 0; i < n; i++)
        scanf("%d", &a[i]);

    printf("\nENTER THE NUMBER OF FRAMES:\n");
    scanf("%d", &no);

    for (i = 0; i < no; i++)
        frame[i] = -1;

    j = 0;

    printf("\nRef String\tPage Frames\n");
    for (i = 0; i < n; i++)
    {
        printf("%d\t\t", a[i]);
        avail = 0;
        for (k = 0; k < no; k++)
        {
            if (frame[k] == a[i])
            {
                avail = 1; // Page hit
                break;
            }
        }

        if (avail == 0)
        {
            frame[j] = a[i];
            j = (j + 1) % no;
            count++;

            for (k = 0; k < no; k++)
            {
                if (frame[k] != -1)
                    printf("%d\t", frame[k]);
                else
                    printf("-\t");
            }
        }
        printf("\n");
    }

    printf("\nTotal Page Faults: %d\n", count);

    return 0;
}

Q2 Write a program to implement CPU Scheduling algorithms like SJF.

#include <stdio.h>

void main()
{
    int i, j, n, bt[10], compt[10], wt[10], tat[10], temp;
    float sumwt = 0.0, sumtat = 0.0, avgwt, avgtat;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    printf("Enter the burst time of %d processes:\n", n);
    for (i = 0; i < n; i++)
    {
        scanf("%d", &bt[i]);
    }

    // Sorting burst time using SJF
    for (i = 0; i < n; i++)
    {
        for (j = i + 1; j < n; j++)
        {
            if (bt[i] > bt[j])
            {
                temp = bt[i];
                bt[i] = bt[j];
                bt[j] = temp;
            }
        }
    }

    compt[0] = bt[0];
    for (i = 1; i < n; i++)
    {
        compt[i] = bt[i] + compt[i - 1];
    }

    for (i = 0; i < n; i++)
    {
        tat[i] = compt[i];
        wt[i] = tat[i] - bt[i];
        sumtat += tat[i];
        sumwt += wt[i];
    }

    avgwt = sumwt / n;
    avgtat = sumtat / n;

    printf("------------------------------\n");
    printf("P\tBt\tCt\tTat\tWt\n");
    printf("------------------------------\n");
    for (i = 0; i < n; i++)
    {
        printf("P%d\t%2d\t%2d\t%2d\t%2d\n", i + 1, bt[i], compt[i], tat[i], wt[i]);
    }
    printf("------------------------------\n");
    printf("Avg Wt = %.2f\tAvg Tat = %.2f\n", avgwt, avgtat);
    printf("------------------------------\n");
}

Q3 Write a program to implement CPU Scheduling algorithms like FCFS.

#include <stdio.h>

int main() {
    int i, j, n, bt[10], compt[10], at[10], wt[10], tat[10];
    float sumwt = 0.0, sumtat = 0.0, avgwt, avgtat;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    printf("Enter the burst time of %d processes:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &bt[i]);
    }

    printf("Enter the arrival time of %d processes:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &at[i]);
    }

    // Sort processes by arrival time
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (at[i] > at[j]) {
                // Swap arrival time
                int temp = at[i];
                at[i] = at[j];
                at[j] = temp;

                // Swap burst time accordingly
                temp = bt[i];
                bt[i] = bt[j];
                bt[j] = temp;
            }
        }
    }

    // Calculate completion time
    if (at[0] > 0)
        compt[0] = at[0] + bt[0];
    else
        compt[0] = bt[0];

    for (i = 1; i < n; i++) {
        if (compt[i - 1] < at[i])
            compt[i] = at[i] + bt[i]; // CPU idle time
        else
            compt[i] = compt[i - 1] + bt[i];
    }

    // Calculate TAT and WT
    for (i = 0; i < n; i++) {
        tat[i] = compt[i] - at[i];
        wt[i] = tat[i] - bt[i];
        sumtat += tat[i];
        sumwt += wt[i];
    }

    avgwt = sumwt / n;
    avgtat = sumtat / n;

    printf("----------------------------------\n");
    printf("PN\tBt\tAt\tCt\tTat\tWt\n");
    printf("----------------------------------\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%2d\t%2d\t%2d\t%2d\t%2d\n", i + 1, bt[i], at[i], compt[i], tat[i], wt[i]);
    }
    printf("----------------------------------\n");
    printf("Avg WT = %.2f\tAvg TAT = %.2f\n", avgwt, avgtat);
    printf("----------------------------------\n");

    return 0;
}

Q4 “getpid()” and “getppid()”

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    printf("Process ID = %d\n", getpid());
    printf("Parent Process ID = %d\n", getppid());  // Corrected this line
    return 0;
}
