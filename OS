Q1 Write a program to implement FIFO page replacement policies.

#include <stdio.h>
int main()
{
int i,j,n,a[50],frame[10],no,k,avail,count=0;
            printf("\n ENTER THE NUMBER OF PAGES:\n");
scanf("%d",&n);
            printf("\n ENTER THE PAGE NUMBER :\n");
            for(i=1;i<=n;i++)
            scanf("%d",&a[i]);
            printf("\n ENTER THE NUMBER OF FRAMES :");
            scanf("%d",&no);

for(i=0;i<no;i++)
            frame[i]= -1;
                        j=0;
                        printf("\tref string\t page frames\n");
for(i=1;i<=n;i++)
                        {
                                    printf("%d\t\t",a[i]);
                                    avail=0;
                                    for(k=0;k<no;k++)
if(frame[k]==a[i])
                                                avail=1;
                                    if (avail==0)
                                    {
                                                frame[j]=a[i];
                                                j=(j+1)%no;
                                                count++;
                                                for(k=0;k<no;k++)
                                                printf("%d\t",frame[k]);
}
                                    printf("\n");
}
                        printf("Page Fault Is %d",count);
                        return 0;
}


Q2 Write a program to implement CPU Scheduling algorithms like SJF.

#include <stdio.h>
#include <conio.h>
#include <string.h>
void main()
{
    int i, j, n, bt[10], compt[10], wt[10], tat[10], temp;
    float sumwt = 0.0, sumtat = 0.0, avgwt, avgtat;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter the burst time of %d processes:\n", n);
    for (i = 0; i < n; i++)
    {
        scanf("%d", &bt[i]);
    }
    for (i = 0; i < n; i++)
    {
        for (j = i + 1; j < n; j++)
        {
            if (bt[i] > bt[j])
            {
                temp = bt[i];
                bt[i] = bt[j];
                bt[j] = temp;
            }
        }
    }
    compt[0] = bt[0];
    for (i = 1; i < n; i++)
    {
        compt[i] = bt[i] + compt[i - 1];
    }
    for (i = 0; i < n; i++)
    {
        tat[i] = compt[i];
        wt[i] = tat[i] - bt[i];
        sumtat += tat[i];
        sumwt += wt[i];
    }
    avgwt = sumwt / n;
    avgtat = sumtat / n;
    printf("------------------------------\n");
    printf("Bt\tCt\tTat\tWt\n");
    printf("------------------------------\n");
    for (i = 0; i < n; i++)
    {
        printf("%2d\t%2d\t%2d\t%2d\n", i, bt[i], compt[i], tat[i], wt[i]);
    }
    printf("------------------------------\n");
    printf("Avgwt = %.2f\tAvgtat = %.2f\n", avgwt, avgtat);
    printf("------------------------------\n");
    getch();
}


Q3 Write a program to implement CPU Scheduling algorithms like FCFS.

#include <stdio.h>
#include <string.h>
int main()
{
int i,j,n,bt[10],compt[10],at[10], wt[10],tat[10];
float sumwt=0.0,sumtat=0.0,avgwt,avgtat;
printf("Enter number of processes: ");
scanf("%d",&n);
printf("Enter the burst time of %d process\n", n);
for(i=0;i<n;i++)
{
scanf("%d",&bt[i]);
}
printf("Enter the arrival time of %d process\n", n);
for(i=0;i<n;i++)
{
scanf("%d",&at[i]);
}
compt[0]=bt[0]-at[0];

for(i=1;i<n;i++)
compt[i]=bt[i]+compt[i-1];
for(i=0;i<n;i++)
{
tat[i]=compt[i]-at[i];
wt[i]=tat[i]-bt[i];
sumtat+=tat[i];
sumwt+=wt[i];
}
avgwt=sumwt/n;
avgtat=sumtat/n;
printf("----------------------------------\n");
printf("PN\tBt\tCt\tTat\tWt\n");
printf("----------------------------------\n");
for(i=0;i<n;i++)
{
printf("%d\t%2d\t%2d\t%2d\t%2d\n",i,bt[i],compt[i],tat[i],wt[i]);
}
printf("----------------------------------\n");
printf(" Avgwt = %.2f\tAvgtat = %.2f\n",avgwt,avgtat);
printf("-----------------------------------\n");
return 0;
}


Q4 “getpid()” and “getppid()”

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    printf("Process ID = %d\n", getpid());
    printf("Parent Process ID = %d\n", getppid());  // Corrected this line
    return 0;
}
