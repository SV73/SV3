Q1 Write a program to implement insertion sort.

#include <stdio.h>
#include <conio.h>
#define MAX 100

void insertion_sort(int arr[], int n);

void main()
{
    int n, i, a[MAX];
    clrscr();

    printf("\nENTER THE NUMBER OF ELEMENTS TO BE SORTED: ");
    scanf("%d", &n);

    printf("\nENTER %d ELEMENTS IN ARRAY TO SORT:\n", n);
    for (i = 0; i < n; i++)
    {
        scanf("%d", &a[i]);
    }

    printf("\nELEMENTS BEFORE SORTING:\n");
    for (i = 0; i < n; i++)
    {
        printf("%d\t", a[i]);
    }

    insertion_sort(a, n);

    printf("\nELEMENTS AFTER SORTING:\n");
    for (i = 0; i < n; i++)
    {
        printf("%d\t", a[i]);
    }

    getch();
}

void insertion_sort(int arr[], int n)
{
    int i, key, j;
    for (i = 1; i < n; i++)
    {
        key = arr[i];
        j = i - 1;

        // Move elements of arr[0..i-1], that are greater than key, one position ahead
        while (j >= 0 && arr[j] > key)
        {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

Q2 WP to implement MST of prim's algorithm.

#include <stdio.h>
#define SIZE 20
#define INF 32767

void prim(int G[SIZE][SIZE], int nodes) {
    int selected[SIZE] = {0}, i, j, k;
    int total = 0, min, u = 0, v = 0;

    selected[0] = 1; // start from node 0
    printf("\nMinimal Spanning Tree:\n");

    for (k = 1; k < nodes; k++) {
        min = INF;
        for (i = 0; i < nodes; i++) {
            if (selected[i]) {
                for (j = 0; j < nodes; j++) {
                    if (!selected[j] && G[i][j] && G[i][j] < min) {
                        min = G[i][j];
                        u = i;
                        v = j;
                    }
                }
            }
        }
        selected[v] = 1;
        printf("Edge (%d - %d) Weight: %d\n", u, v, min);
        total += min;
    }

    printf("Total Weight: %d\n", total);
}

void main() {
    int G[SIZE][SIZE] = {0}, nodes, edges, i, v1, v2, weight;

    printf("Prim's Algorithm - MST\n");
    printf("Enter number of nodes: ");
    scanf("%d", &nodes);
    printf("Enter number of edges: ");
    scanf("%d", &edges);

    for (i = 0; i < edges; i++) {
        printf("Enter edge (v1 v2) and weight: ");
        scanf("%d %d %d", &v1, &v2, &weight);
        G[v1][v2] = G[v2][v1] = weight;
    }

    prim(G, nodes);
    getch();
}

Q3 Implement Rabin Karp.

#include <stdio.h>
#include <string.h>
#define d 10
void rabinKarp(char pattern[], char text[], int q)
{
int m= strlen(pattern);
int n = strlen(text);
int i, j;
int p = 0;
int t = 0;
int h = 1;
for (i= 0; i< m- 1; i++)
h = (h * d) % q;
// Calculate hash value for pattern and textfor
for(i = 0; i < m; i++) {
p = (d * p + pattern[i]) % q;t
= (d * t +text[i]) % q;
}
// Find the match
for (i= 0; i <= n - m; i++)
{if (p == t) {
for (j= 0; j < m; j++) {
if(text[i+ j] != pattern[j])
break;
}
if(j == m)
printf("Pattern is found at position: %d \n", i+ 1);

}
if(i < n - m) {
t = (d * (t - text[i] * h) + text[i + m]) % q;if
(t < 0)
t = (t + q);
}
}
}
void main()
{
char text[20],pattern[10];
printf("Enter Text:\n");
scanf("%s",text);
printf("Enter Pattern:\n");
scanf("%s",pattern);
int q = 13;
rabinKarp(pattern, text, q);
getch();
}

Q4  WP to implement MST of Kruskal's algorithm.

#include <stdio.h>
#define INFINITY 999

typedef struct Graph {
    int v1;
    int v2;
    int cost;
} GR;

GR G[20];
int tot_edges, tot_nodes;

void create();
void spanning_tree();
int Minimum(int);
int Find(int, int[]);
void Union(int, int, int[]);

int main() {
    printf("\n\t Graph Creation by adjacency matrix");
    create();
    spanning_tree();
    getch();
    return 0;
}

void create() {
    int k;
    printf("\n Enter Total number of nodes: ");
    scanf("%d", &tot_nodes);
    printf("\n Enter Total number of edges: ");
    scanf("%d", &tot_edges);
    
    for (k = 0; k < tot_edges; k++) {
        printf("\n Enter Edge in (V1 V2) form: ");
        scanf("%d%d", &G[k].v1, &G[k].v2);
        printf(" Enter Corresponding Cost: ");
        scanf("%d", &G[k].cost);
    }
}

void spanning_tree() {
    int count = 0, k = 0, v1, v2, i, j, tree[10][2], pos, parent[10], sum = 0;

    for (i = 0; i < tot_nodes; i++) {
        parent[i] = i;
    }

    while (count != tot_nodes - 1) {
        pos = Minimum(tot_edges);  // Finding the minimum cost edge
        if (pos == -1)  // Perhaps no node in the graph
            break;

        v1 = G[pos].v1;
        v2 = G[pos].v2;
        i = Find(v1, parent);
        j = Find(v2, parent);

        if (i != j) {
            tree[k][0] = v1;  // Storing the minimum edge
            tree[k][1] = v2;
            k++;
            count++;
            sum += G[pos].cost;
            Union(i, j, parent);
        }

        G[pos].cost = INFINITY;  // Mark this edge as used
    }

    if (count == tot_nodes - 1) {
        printf("\n Spanning tree is:\n\n");
        for (i = 0; i < tot_nodes - 1; i++) {
            printf("[%d - %d]\n", tree[i][0], tree[i][1]);
        }
        printf("\nCost of Spanning Tree is = %d\n", sum);
    } else {
        printf("\nThere is no Spanning Tree\n");
    }
}

int Minimum(int n) {
    int i, small = INFINITY, pos = -1;
    for (i = 0; i < n; i++) {
        if (G[i].cost < small) {
            small = G[i].cost;
            pos = i;
        }
    }
    return pos;
}

int Find(int v2, int parent[]) {
    while (parent[v2] != v2) {
        v2 = parent[v2];
    }
    return v2;
}

void Union(int i, int j, int parent[]) {
    if (i < j)
        parent[j] = i;
    else
        parent[i] = j;
}

